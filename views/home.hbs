{{> createNewsFeed}}
<div class="container-fluid px-4">
    <h4 class="">Tin Mới Cập Nhật</h4>
    <div class="rows">
        <div id="newsFeedContainer"></div>
    </div>
</div>
<script>
    const itemPerPage = 6
    const data = []
    let newsFeedCount = 0
    let newsFeedLoad = true
    const newsFeedContainerDom = document.querySelector("#newsFeedContainer")

    const renderNewsFeed = (newsFeed) => {
        const row = document.createElement("a")
        row.classList = "d-grid col-12 col-md-6 mx-auto mb-5"
        row.href = `/news-feed/details/${newsFeed.id}`
        row.id = `newsFeed_${newsFeed.id}`
        row.innerHTML = `
            <div class="d-flex justify-content-between">
                <p class="col-8 fw-bold text-dark"># ${escapeHtml(newsFeed.title)}</p>
                <span class="col-4 text-end">${dateTimeFormat(newsFeed.publishedAt)}</span>
            </div>
            
            <div class="col-12 p-4 text-dark border border-1">
                ${escapeHtml(newsFeed.content).replace(/\n/g, "<br>")}
            </div>
            <div class="col-12">
                <img class="w-100" src="${newsFeed.imagePath}" />
            </div>
            <div class="col-12 d-flex justify-content-between mt-2">
                <span class="text-dark">${newsFeed.NewsFeedFeelings.length} lượt thích</span>
                <span class="text-dark">${newsFeed.NewsFeedComments.length} bình luận</span>
            </div>
        `
        return row
    }

    const loadMoreNewsFeed = async () => {
        newsFeedLoad = false
        const formData = new FormData()
        formData.append("offset", newsFeedCount)
        formData.append("limit", itemPerPage)

        const data = JSON.stringify(Object.fromEntries(formData.entries()));

        fetch('/news-feed/load', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: data
        })
            .then(response => {
                return response.json()
            })
            .then(data => {
                if (data.success) {
                    const { newsFeeds } = data
                    if (newsFeeds.length >= itemPerPage) {
                        newsFeedLoad = true
                    }
                    newsFeeds.forEach(newsFeed => {
                        ++newsFeedCount
                        const row = renderNewsFeed(newsFeed)
                        newsFeedContainerDom.append(row)
                    })
                }
            })
            .catch(error => {
                console.error('Error:', error)
            })
    }
    const onScrollNewsFeedBox = async () => {
        if (newsFeedLoad) {
            const { scrollTop, scrollHeight, clientHeight } = document.documentElement
            if (scrollTop + clientHeight >= scrollHeight - 50) {
                newsFeedLoad = false
                await loadMoreNewsFeed()
            }
        }
    }
    loadMoreNewsFeed()
    window.addEventListener("scroll", onScrollNewsFeedBox)

    eventWS.registerListener('newsFeedCreateEvent', 'home', (payload) => {
        if (payload.newNewsFeed) {
            const row = renderNewsFeed(payload.newNewsFeed)
            newsFeedContainerDom.prepend(row)
        }
    })
</script>